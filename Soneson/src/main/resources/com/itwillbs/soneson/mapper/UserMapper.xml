<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.soneson.mapper.UserMapper">
	<!-- insert  -->
	<insert id="insertUser" >
	INSERT INTO user(
			user_name
			, user_id
			, user_email
			, user_passwd
			, hire_date
			, user_is_admin
			, mail_auth_status
			, user_status
			, kakao_id
			, user_info
			, user_picture
			, user_phone
	)
  	 VALUES (
			#{user_name}
			, #{user_id}
			, #{user_email} 
			, #{user_passwd}
			, now()
			, 'N'
			, 'N'
			, '가입'
			, null
			, null
			, null
			, null
	)
	
	</insert>
	
	<!-- 인증정보 등록 - INSERT -->
	<insert id="insertAuthInfo">
		INSERT
		INTO auth_info
		VALUES (
			#{id}
			, #{authCode}
		)
	</insert>
	
	<insert id="insertMyQuestion">
		<selectKey keyProperty="myQuestion_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(myQuestion_num), 0) 
			FROM myQuestion
		</selectKey>
		INSERT
		INTO myQuestion
		VALUES (
			null
			, #{myQuestion_id}
			, #{myQuestion_subject}
			, #{myQuestion_content}
			, #{myQuestion_answer}
			, 'N'
			, now()
		)
	</insert>
	
	<!-- select -->
	<select id="selectUserPass" resultType="User">
		SELECT
			user_idx
			, user_name
			, user_id
			, user_email
			, user_passwd
<!-- 			, user_phone -->
			, hire_date
			, user_is_admin
			, mail_auth_status
		  	, user_status
			, CASE
				WHEN kakao_id IS NULL THEN '미연동'
				ELSE '연동됨'
			  END AS kakao_id
		FROM user 
		WHERE user_id = #{user_id}
	</select>

	<!-- select -->
	<select id="selectUserId" resultType="User">
		SELECT
			 user_id
		FROM user 
		WHERE user_id = #{user_id}
	</select>

	<select id="selectUserEmail" resultType="User">
		SELECT
			 user_email
		FROM user 
		WHERE user_email = #{user_email}
	</select>

	<select id="selectUserList" resultType="User">
		SELECT * FROM user
	</select>

	<!-- 전달받은 아이디(id)에 해당하는 auth_info 테이블의 레코드 조회 -->
	<select id="selectAuthInfo" resultType="AuthInfo">
		SELECT *
		FROM auth_info
		WHERE auth_id = #{id}
	</select>


	<select id="checkUser" resultType="User">
		SELECT * 
		  FROM user 
		 WHERE user_email = #{user_email} 
		   AND user_passwd = #{user_passwd}
	</select>
	
	<!-- 암호화 된 패스워드 조회 -->
	<!-- member 테이블의 아이디에 해당하는 패스워드 조회 -->
	<!-- resultType 은 MemberVO 타입 또는 string(String) 타입 활용 -->
	<select id="selectPasswd" resultType="string">
		SELECT passwd
		FROM user
		WHERE user_id = #{user_id}
	</select>

	<!-- 아이디 찾기 -->
	<select id="selectIdSearch" resultType="User">
		SELECT user_id
		FROM user
		WHERE user_name = #{user_name} 
		AND user_email = #{user_email}
	</select>

	<!-- 비밀번호 찾기 -->
	<select id="selectPasswdSearch" resultType="int">
		SELECT COUNT(user_id)
		FROM user
		WHERE user_id = #{user_id}
			AND user_email = #{user_email}
	</select>
	
	<!-- 임시 비밀번호 변경 -->
	<update id="updatePasswdChange">
		UPDATE user
		SET user_passwd = #{user_passwd}
		WHERE user_id = #{user_id}
			AND user_email = #{user_email}
	</update>
	
    
	<!-- update -->
	<!-- 기존 인증정보 갱신 - UPDATE -->
	<!-- 아이디에 해당하는 레코드의 인증코드를 수정 -->
	<update id="updateAuthInfo">
		UPDATE auth_info
		SET auth_code = #{authCode}
		WHERE auth_id = #{id}
	</update>
	
	<!-- 회원 인증상태 변경 - UPDATE -->
	<!-- user 테이블의 아이디에 해당하는 레코드의 인증상태(member_auth_status) 컬럼값 "Y" 로 변경 -->
	<update id="updateMailAuthStatus">
		UPDATE user
		SET mail_auth_status = 'Y'
		WHERE user_id = #{id}
	</update>
	
	
	<!-- 회원 정보 변경 -->
	<update id="updateUser">
		UPDATE user
		SET user_passwd = #{user_passwd}
		WHERE user_id = #{user_id}
	</update>
	
	
	
	<!-- delete -->
	<!-- 인증정보 삭제 - DELETE -->
	<!-- auth_info 테이블의 아이디에 해당하는 레코드의 인증정보 삭제 -->
	<delete id="deleteAuthInfo">
		DELETE FROM auth_info
		WHERE auth_id = #{id}
	</delete>


	<!-- 회원 탈퇴지만 foreign키 때문에 update를 사용하여 탈퇴상태변경-->
	<update id="deleteUser">
		UPDATE user
		SET user_name = ''
			, user_phone = ''
			, user_is_admin = 'N'
			, kakao_id = ''
			, user_status = '탈퇴'
			, user_email = #{user_email}
		WHERE user_id = #{user_id}
	</update>
	

	
	
	<!-- 내가 쓴 리뷰 삭제 -->
	<delete id="deleteMyReview">
		DELETE FROM review
		WHERE review_num = #{review_num}
	</delete>
	
	
	<select id="getUserKakaoLogin" resultType="User">	
		SELECT
			user_id
			, user_is_admin
			, kakao_id
		FROM user
		WHERE kakao_id = #{kakao_id}
	</select>
	
	<update id="updateKakaoId">
		UPDATE user
		SET kakao_id = #{kakao_id}
		WHERE user_id = #{user_id}
	</update>
	
	<update id="updateRandomEmail">
		UPDATE user
		SET user_email = #{user_email}
		WHERE user_id = #{user_id}
	</update>
	
	
<!-- 	====================================================== -->

	<select id="getUserProfile" resultType="User">
		SELECT 
			user_name
			, user_info
			, user_picture 
		FROM user
		WHERE user_id = #{sId}
	</select>
	
	<update id="updateUserInfo">
		UPDATE user
		SET 
			<if test="user_name != null and user_name != ''">
				user_name = #{user_name}
			</if>
			<if test="user_info != null and user_info != ''">
				user_info = #{user_info}
			</if>
		WHERE user_id = #{sId};
	</update>
	
	<select id="selectUserFint" resultType="User">
		SELECT user_idx
			, user_name
			, user_id
			, user_email
			, user_passwd
			, hire_date
			, user_is_admin
			, mail_auth_status
		  	, user_status
			, CASE
				WHEN kakao_id IS NULL THEN '미연동'
				ELSE '연동됨'
			  END AS kakao_id 
		    ,   (SELECT  f.access_token
			     FROM user 
			     LEFT JOIN fintech_user_info AS f
				      ON user.user_id  = f.id
			    WHERE user_id = #{user_id}) AS access_token
			,   (SELECT f.user_seq_no
			     FROM user 
			     LEFT JOIN fintech_user_info AS f
				      ON user.user_id  = f.id
			     WHERE user_id = #{user_id}) AS user_seq_no
		     FROM user
		     WHERE user_id = #{user_id}
	</select>
	
	
	<update id="updatePassword">
		UPDATE user
		SET user_passwd = #{user_passwd}
		WHERE user_id = #{user_id}
	</update>
	
	<select id="selectUserAccount" resultType="User">
		SELECT 
			user_idx
			, user_phone
			, kakao_id
		FROM user
		WHERE user_id = #{user_id}
	</select>
	
	<update id="updateUserPhone">
		UPDATE user
		SET user_phone = #{user_phone}
		WHERE user_id = #{user_id}
	</update>
	
	<update id="updateKakaoStatus">
		UPDATE user
		SET kakao_id = null
		WHERE user_id = #{sId}
	</update>
	
	<update id="updateUserLeave">
		UPDATE user
		SET 
			user_name = ""
			, user_email = #{user_email}
			, user_passwd = ""
			, user_is_admin = "N"
			, mail_auth_status = ""
			, user_status = "탈퇴"
			, kakao_id = null
			, user_info = null
			, user_picture = null
			, user_phone = null
		WHERE user_id = #{user_id}
	</update>
	
	<select id="checkDuplicateEmail" resultType="int">
		SELECT COUNT(user_idx)
		FROM user
		WHERE user_email = #{deleteEmail}
		address_reciver_phone
	</select>
	
	<select id="checkDuplicateAddress" resultType="int">
		SELECT COUNT(address_idx)
		FROM address
		WHERE
			user_id = #{user_id}
			AND address_reciver = #{address_reciver}
			AND address_main = #{address_main}
			AND address_sub = #{address_sub}
	</select>
	
	<insert id="insertUserAddress">
		INSERT INTO address (
			user_id
			, address_reciver
			, address_code
			, address_main
			, address_sub
			, address_reciver_phone
		)
		VALUES (
			#{user_id }
			, #{address_reciver }
			, #{address_code }
			, #{address_main }
			, #{address_sub }
			, #{address_reciver_phone }
		);
	</insert>
	
	<select id="selectUserAddress" resultType="Address">
		SELECT
			address_idx
			, address_reciver
			, address_code
			, address_main
			, address_sub
			, address_reciver_phone
		FROM address
		WHERE user_id = #{sId}
	</select>
	
	<delete id="deleteUserAddress">
		DELETE FROM address
		WHERE address_idx = #{address_idx}
	</delete>
	
	<select id="selectIsUserProfilePicExist" resultType="boolean">
		SELECT if(user_picture is NULL OR user_picture = '', false, true) AS isUserPicNull
		FROM user
		WHERE user_id = #{sId}
	</select>
	
	<update id="updateUserProfilePic">
		UPDATE user
		SET user_picture = #{user_picture}
		WHERE user_id = #{user_id}
	</update>
	
	<select id="selectUserPicPath" resultType="String">
		SELECT user_picture
		FROM user
		WHERE user_id = #{sId}
	</select>
	
	<select id="selectUserMainInfo" resultType="map">
		SELECT 
			user_idx
			, user_name
			, user_id
			, TIMESTAMPDIFF(YEAR, now(), hire_date) AS hire_year
			, user_picture
			, (select COUNT(follow_id)
				from follow
				where 
					user_id = #{sId}
					AND follow_id = #{id}) AS followCnt
		FROM user
		WHERE user_id = #{id}
	</select>
	
	<select id="selectExistUser" resultType="int">
		SELECT COUNT(*)
		FROM user
		WHERE user_id = #{id}
	</select>
	
	<select id="selectUserInfo" resultType="string">
		SELECT user_info
		FROM user
		WHERE user_id = #{user_id}
	</select>
	
	<insert id="insertFollow">
		INSERT INTO follow (
			user_id
			, follow_id
		)
		VALUES (
			#{sId}	
			, #{follow_id}
		)
	</insert>
	
	<delete id="deleteFollow">
		DELETE FROM follow
		WHERE 
			user_id = #{sId}
			AND follow_id = #{follow_id}
	</delete>
	
	<select id="selectUserFollower" resultType="map">
		SELECT 
			user_id AS uId
			, user_name
			, user_info
			, (SELECT COUNT(*)
				FROM follow
				WHERE follow_id = uId) AS count
		FROM user
		WHERE user_id IN (select user_id
							from follow
							WHERE follow_id = #{user_id});
	</select>
	
	<select id="selectIsFollowing" resultType="int">
		select COUNT(follow_id)
		from follow
		where 
			user_id = #{sId}
			AND follow_id = #{id}
	</select>
	
	<select id="countFollower" resultType="int">
		SELECT COUNT(*)
		FROM follow
		WHERE follow_id = #{user_id}
	</select>
	
	<select id="selectUserFollowing" resultType="map">
		SELECT 
			user_id AS uId
			, user_name
			, user_info
			, (SELECT COUNT(*)
				FROM follow
				WHERE follow_id = uId) AS count
		FROM user
		WHERE user_id IN (SELECT follow_id 
							FROM follow
							WHERE user_id = #{user_id});
	</select>



	<select id="selectUserOTO" resultType="MyQuestion">
		SELECT 
			*
		FROM myQuestion
		WHERE myQuestion_id = #{sId}
	</select>

	<select id="selectUserAnswer" resultType="MyQuestion">
		SELECT 
			*
		FROM myQuestion
		WHERE myQuestion_num = #{myQuestion_num}
	</select>
	
	<select id="selectUploadProjects" resultType="map">
		SELECT DISTINCT 
			p.project_code
			, title
			, subtitle
			, category
			, img_main
			, CASE
				WHEN (DATEDIFF(end_date, now()) >= 0) THEN CONCAT(DATEDIFF(end_date, now()), '일 남음')
				WHEN (DATEDIFF(end_date, now()) = 0) THEN '오늘 종료'
		        ELSE '종료 됨'
			  END AS d_day
			, IFNULL((SELECT sum(cost)
						FROM fund
						WHERE project_code = p.project_code), 0) AS total
			, IFNULL(TRUNCATE((SELECT sum(cost)
								FROM fund
								WHERE project_code = p.project_code) / goal_amount * 100, 0), 0) AS rate
		FROM project p
		LEFT JOIN fund f
		ON p.project_code = f.project_code
		where p.user_id = #{user_id}
	</select>
	
	<select id="selectSupportProjects" resultType="map">
		SELECT DISTINCT 
			p.project_code
			, title
			, subtitle
			, category
			, img_main
			, CASE
				WHEN (DATEDIFF(end_date, now()) >= 0) THEN CONCAT(DATEDIFF(end_date, now()), '일 남음')
				WHEN (DATEDIFF(end_date, now()) = 0) THEN '오늘 종료'
		        ELSE '종료 됨'
			  END AS d_day
			, IFNULL((SELECT sum(cost)
						FROM fund
						WHERE project_code = p.project_code), 0) AS total
			, IFNULL(TRUNCATE((SELECT sum(cost)
								FROM fund
								WHERE project_code = p.project_code) / goal_amount * 100, 0), 0) AS rate
		FROM project p
		LEFT JOIN fund f
		ON p.project_code = f.project_code
		where f.user_id = #{user_id}
	</select>


	<select id="selectUploadProjectList" resultType="map">
		-- selectUploadProjectList
		SELECT DISTINCT 
			p.project_code
			, p.user_id
			, title
			, subtitle
			, category
			, img_main
			, CASE
				WHEN (DATEDIFF(end_date, now()) >= 0) THEN CONCAT(DATEDIFF(end_date, now()), '일 남음')
				WHEN (DATEDIFF(end_date, now()) = 0) THEN '오늘 종료'
		        ELSE '종료 됨'
			  END AS d_day
			, IFNULL((SELECT sum(cost)
						FROM fund
						WHERE project_code = p.project_code), 0) AS total
			, IFNULL(TRUNCATE((SELECT sum(cost)
								FROM fund
								WHERE project_code = p.project_code) / goal_amount * 100, 0), 0) AS rate
		FROM project p
		LEFT JOIN fund f
		ON p.project_code = f.project_code
		WHERE p.user_id = #{sId}
	</select>



	<select id="selectWritingProjectList" resultType="map">
		SELECT *
		FROM sample_pro
		WHERE user_id = #{sId}
	</select>


	
	<select id="selectUserProjectExam" resultType="map">
		-- selectUserProjectExam
		SELECT DISTINCT 
			p.project_code
			, p.user_id
			, title
			, subtitle
			, category
			, img_main
			, CASE
				WHEN (DATEDIFF(end_date, now()) >= 0) THEN CONCAT(DATEDIFF(end_date, now()), '일 남음')
				WHEN (DATEDIFF(end_date, now()) = 0) THEN '오늘 종료'
		        ELSE '종료 됨'
			  END AS d_day
			, IFNULL((SELECT sum(cost)
						FROM fund
						WHERE project_code = p.project_code), 0) AS total
			, IFNULL(TRUNCATE((SELECT sum(cost)
								FROM fund
								WHERE project_code = p.project_code) / goal_amount * 100, 0), 0) AS rate
		FROM project p
		LEFT JOIN fund f
		ON p.project_code = f.project_code
		WHERE p.user_id = #{sId} AND p.status = '심사대기중'
	</select>

	<select id="selectUserProjectApprove" resultType="map">
		-- selectUserProjectApprove
		SELECT DISTINCT 
			p.project_code
			, p.user_id
			, title
			, subtitle
			, category
			, img_main
			, CASE
				WHEN (DATEDIFF(end_date, now()) >= 0) THEN CONCAT(DATEDIFF(end_date, now()), '일 남음')
				WHEN (DATEDIFF(end_date, now()) = 0) THEN '오늘 종료'
		        ELSE '종료 됨'
			  END AS d_day
			, IFNULL((SELECT sum(cost)
						FROM fund
						WHERE project_code = p.project_code), 0) AS total
			, IFNULL(TRUNCATE((SELECT sum(cost)
								FROM fund
								WHERE project_code = p.project_code) / goal_amount * 100, 0), 0) AS rate
		FROM project p
		LEFT JOIN fund f
		ON p.project_code = f.project_code
		WHERE p.user_id = #{sId} AND p.status = '승인'
	</select>

	<select id="selectUserProjectReject" resultType="map">
		-- selectUserProjectReject
		SELECT DISTINCT 
			p.project_code
			, p.user_id
			, title
			, subtitle
			, category
			, img_main
			, CASE
				WHEN (DATEDIFF(end_date, now()) >= 0) THEN CONCAT(DATEDIFF(end_date, now()), '일 남음')
				WHEN (DATEDIFF(end_date, now()) = 0) THEN '오늘 종료'
		        ELSE '종료 됨'
			  END AS d_day
			, IFNULL((SELECT sum(cost)
						FROM fund
						WHERE project_code = p.project_code), 0) AS total
			, IFNULL(TRUNCATE((SELECT sum(cost)
								FROM fund
								WHERE project_code = p.project_code) / goal_amount * 100, 0), 0) AS rate
		FROM project p
		LEFT JOIN fund f
		ON p.project_code = f.project_code
		WHERE p.user_id = #{sId} AND p.status = '반려'
	</select>
	
    <!-- 유저 공개예정 프로젝트 조회 -->
   	<select id="selectUserProjectRelease" resultType="map">
		SELECT
			project_code
			, title 
			, subtitle
			, category
			, creator
			, img_main
			, date(start_date) AS start_date
			, date(end_date) AS end_date
			, ifnull(goal_amount, 0) AS goal_amount
		FROM project p
		WHERE start_date > now() AND status = '승인' AND user_id = #{sId}
	</select>

    <!-- 유저 공개예정 프로젝트 조회 -->
	<select id="selectUserProjectProceed" resultType="map">
		SELECT *
		FROM 
			(SELECT
				p.project_code
				, max(p.title) AS title
				, max(p.subtitle) AS subtitle
				, max(p.category) AS category
				, max(p.creator) AS creator
				, max(p.img_main) AS img_main
				, date(max(p.start_date)) AS start_date
				, date(max(p.end_date)) AS end_date
				, ifnull(format(sum(cost) , 0), 0) AS now_amount
				, ifnull(max(goal_amount), 0) AS goal_amount
				, ifnull(sum(cost) / max(goal_amount), 0) AS ratio
				, ifnull(TRUNCATE(sum(cost) / max(goal_amount) * 100, 0), 0) AS goal_rate
				, CASE count(p.project_code) WHEN 1 THEN 0 
											 ELSE count(p.project_code)
											 END AS donor
			FROM project p
			LEFT JOIN fund f
			ON p.project_code = f.project_code
			<![CDATA[
			WHERE p.start_date <= now() AND p.end_date >= now() AND p.status = '승인' AND p.user_id = #{sId}
			]]>
			GROUP BY p.project_code) A
		ORDER BY donor DESC
	</select>
	
   	<!-- 유저 마감된 프로젝트 조회 -->
	<select id="selectUserProjectEnd" resultType="map">
	SELECT *
	FROM 
		(SELECT
			p.project_code
			, max(p.title) AS title
			, max(p.subtitle) AS subtitle
			, max(p.category) AS category
			, max(p.creator) AS creator
			, max(p.img_main) AS img_main
			, date(max(p.start_date)) AS start_date
			, date(max(p.end_date)) AS end_date
			, ifnull(format(sum(cost) , 0), 0) AS now_amount
			, ifnull(max(goal_amount), 0) AS goal_amount
			, ifnull(sum(cost) / max(goal_amount), 0) AS ratio
			, ifnull(TRUNCATE(sum(cost) / max(goal_amount) * 100, 0), 0) AS goal_rate
			, CASE count(p.project_code) WHEN 1 THEN 0 
										 ELSE count(p.project_code)
										 END AS donor
		FROM project p
		LEFT JOIN fund f
		ON p.project_code = f.project_code
		<![CDATA[
		WHERE p.end_date < now() AND p.status = '승인' AND p.user_id = #{sId}
		]]>
		GROUP BY p.project_code) A
	ORDER BY donor DESC
	</select>
	
	<!-- 프로젝트 후원자 조회 -->
	<select id="selectfundingDonerInfoList" resultType="map">
		SELECT 
			p.project_code AS project_code
			, p.title AS title
			, p.user_id AS creator_id
			, f.user_id AS doner_id
			, a.address_code AS address_code
			, f.fund_date AS fund_date
			, a.address_reciver AS doner_name
			, a.address_main AS address_main
			, a.address_sub  AS address_sub
			, a.address_reciver_phone  AS phone
			, f.cost AS cost
		FROM project p
		JOIN fund f 
		ON p.project_code = f.project_code
		JOIN user u 
		ON f.user_id = u.user_id
		JOIN address a
		ON u.user_id = a.user_id
		WHERE p.user_id = #{sId} AND p.project_code = #{project_code}
	</select>
	
	<!-- 성윤, 유저 프로필 헤더에 -->
<!-- 	1217 엄성윤 헤더 프로필 -->
	
	<select id="selectUserPicture" resultType="map">
		SELECT 
			user_id
			, user_picture 
		FROM user
		WHERE user_id = #{user_id}
	</select>
	
	
	
	<!-- 훈나 작성 중인 프로젝트 삭제 -->
	<delete id="deleteSampleProject">
		DELETE FROM sample_pro 
		WHERE pro_code = #{project_code}
	</delete>
	
</mapper>


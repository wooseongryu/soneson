<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwillbs.soneson.mapper.ProjectMapper">
	

	
	<!-- 프로젝트 등록 start페이지 -->
	<select id="selectIdProj" resultType="Project">
		SELECT pro_code, user_id, pro_title, pro_thumbsnail
		FROM sample_pro 
		WHERE user_id = #{sId}
		ORDER BY pro_code asc
		Limit 1
	</select>
	
	<!-- 이어쓰기 -->
	<select id="selectProject" resultType="Project">
		SELECT pro_code 
			, user_id 
			, pro_categorie 
			, pro_title 
			, pro_agree 
			, pro_summary 
			, pro_thumbsnail 
			, pro_goal 
			, SUBSTRING_INDEX(pro_startDt , ' ', 1) AS pro_startDt 
			, SUBSTRING_INDEX(pro_startDt , ' ', -1) AS pro_start_time
			, SUBSTRING_INDEX(pro_endDt , ' ', 1) AS pro_endDt 
			, pro_content 
			, pro_budget 
			, pro_sch 
			, pro_team 
			, pro_reward 
			, pro_notice 
			, pro_creator 
			, pro_profile 
			, pro_createrInfo 
			, pro_userAuth
		FROM sample_pro
		WHERE user_id = #{user_id} AND pro_code = #{pro_code}
	</select>
	
	<select id="selectNewProject" resultType="Project">
		SELECT *
		FROM sample_pro
		WHERE user_id = #{user_id}
		ORDER BY pro_insertDt DESC
		LIMIT 1
	</select>
	
	
	
	<!-- 약관동의 후 insert -->
	<insert id="insertStartProj">
		INSERT INTO sample_pro(
			pro_code
			, user_id
			, pro_categorie
			, pro_title
			, pro_agree
			, pro_insertDt
		)
		VALUES (
			null
			,#{user_id}
			, #{pro_categorie}
			, #{pro_title}
			, 'Y'
			, now()
		)
	</insert>
	
	
	<!-- 저장 전 파일명 가져오기 -->
	<select id="selectFileName" resultType="Project">
		SELECT pro_thumbsnail
				,pro_content
				,pro_budget
				,pro_sch
				,pro_team
				,pro_reward
				,pro_profile
		FROM sample_pro
		WHERE pro_code = #{pro_code}
	</select>
	
	
	<!-- 저장하기 -->
	<update id="updateProject">
		UPDATE sample_pro
		SET
			pro_title = #{pro_title}
			, pro_categorie = #{pro_categorie}
			, pro_summary = #{pro_summary}
			<if test="pro_thumbsnail != null and !pro_thumbsnail.equals('')">
				, pro_thumbsnail = #{pro_thumbsnail}
			</if>
			, pro_goal = #{pro_goal}
			<if test="pro_startDt != null and !pro_startDt.equals('')">
				, pro_startDt = CONCAT(#{pro_startDt},' ', #{pro_start_time})
			</if>
			<if test="pro_endDt != null and !pro_endDt.equals('')">
				, pro_endDt = CONCAT(#{pro_endDt},' ', '23:59:59')
			</if>
			<if test="pro_content != null and !pro_content.equals('')">
				, pro_content = #{pro_content}
			</if>
			<if test="pro_budget != null and !pro_budget.equals('')">
				, pro_budget = #{pro_budget}
			</if>
			<if test="pro_sch != null and !pro_sch.equals('')">
				, pro_sch = #{pro_sch}
			</if>
			<if test="pro_team != null and !pro_team.equals('')">
				, pro_team = #{pro_team}
			</if>
			<if test="pro_reward != null and !pro_reward.equals('')">
				, pro_reward = #{pro_reward}
			</if>
			, pro_notice = #{pro_notice}
			, pro_creator = #{pro_creator}
			<if test="pro_profile != null and !pro_profile.equals('')">
				, pro_profile = #{pro_profile}
			</if>
			, pro_createrInfo = #{pro_createrInfo}
			, pro_userAuth = #{pro_userAuth}
		WHERE pro_code = #{pro_code}
			
	</update>
	
	
	
	
<!-- 아래는 프로젝트 리스트, 성윤 -->

<!-- 헤더 -->
	<select id="getTabList" resultType="map">
		SELECT *
		FROM project_tab;
	</select>


	
<!-- 탭별 프로젝트 리스트 -->


<sql id="popular">
	<![CDATA[
			WHERE p.start_date <= now()
	]]>
			GROUP BY p.project_code) A
<!-- 		데이터 쌓이면 주석 풀기 -->
<!-- 		WHERE A.goal_rate >= 100	 -->
		ORDER BY donor DESC;	
</sql>
<sql id="new">
	<![CDATA[
			WHERE p.start_date <= now()
			GROUP BY p.project_code) A
		ORDER BY now() - A.start_date;	
	]]>
</sql>
<sql id="closing">
	<![CDATA[
			WHERE p.start_date <= now()
				AND p.end_date > now()
			GROUP BY p.project_code) A
		ORDER BY A.end_date - now();	
	]]>
</sql>
<sql id="upcoming">
	<![CDATA[
			GROUP BY p.project_code) A
		WHERE start_date > now();	
	]]>
</sql>


<sql id="all">
	<![CDATA[
			WHERE p.start_date <= now()
			GROUP BY p.project_code) A
		ORDER BY donor DESC;	
	]]>
</sql>
<sql id="youth">
	<![CDATA[
			WHERE p.start_date <= now()
			AND category = '아동/청소년'
			GROUP BY p.project_code) A
		ORDER BY donor DESC;	
	]]>
</sql>
<sql id="animal">
	<![CDATA[
			WHERE p.start_date <= now()
			AND category = '동물'
			GROUP BY p.project_code) A
		ORDER BY donor DESC;	
	]]>
</sql>
<sql id="nature">
	<![CDATA[
			WHERE p.start_date <= now()
			AND category = '환경'
			GROUP BY p.project_code) A
		ORDER BY donor DESC;	
	]]>
</sql>
<sql id="disabled">
	<![CDATA[
			WHERE p.start_date <= now()
			AND category = '장애인'
			GROUP BY p.project_code) A
		ORDER BY donor DESC;	
	]]>
</sql>
<sql id="woman">
	<![CDATA[
			WHERE p.start_date <= now()
	]]>
			AND category = '가족/여성'
			GROUP BY p.project_code) A
		ORDER BY donor DESC;	
</sql>
<sql id="eldery">
	<![CDATA[
			WHERE p.start_date <= now() AND p.end_date >= now()
			AND category = '어르신'
			GROUP BY p.project_code) A
		ORDER BY donor DESC;	
	]]>
</sql>
<sql id="etc">
	<![CDATA[
			WHERE p.start_date <= now() AND p.end_date >= now()
			AND category = '기타'
			GROUP BY p.project_code) A
		ORDER BY donor DESC
	]]>
</sql>


	<select id="getTabProjectList" resultType="map">
		SELECT *
		FROM 
			(SELECT
				p.project_code
				, max(p.title) AS title
				, max(p.subtitle) AS subtitle
				, max(p.category) AS category
				, max(p.creator) AS creator
				, max(p.img_main) AS img_main
				, date(max(p.start_date)) AS start_date
				, date(max(p.end_date)) AS end_date
				, ifnull(format(sum(cost) , 0), 0) AS now_amount
				, ifnull(max(goal_amount), 0) AS goal_amount
				, ifnull(sum(cost) / max(goal_amount), 0) AS ratio
				, ifnull(TRUNCATE(sum(cost) / max(goal_amount) * 100, 0), 0) AS goal_rate
				, count(f.fund_code) AS donor
			FROM project p
			LEFT JOIN fund f
			ON p.project_code = f.project_code
			<choose>
				<when test="listType.equals('popular')">
					<include refid="popular"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('new')">
					<include refid="new"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('closing')">
					<include refid="closing"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('upcoming')">
					<include refid="upcoming"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('all')">
					<include refid="all"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('youth')">
					<include refid="youth"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('animal')">
					<include refid="animal"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('nature')">
					<include refid="nature"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('disabled')">
					<include refid="disabled"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('woman')">
					<include refid="woman"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('eldery')">
					<include refid="eldery"/>
				</when>
			</choose>
			<choose>
				<when test="listType.equals('etc')">
					<include refid="etc"/>
				</when>
			</choose>
		
	</select>
	
	
	
	<!-- 프로젝트 디테일 페이지 -->
	<select id="getProject" resultType="map">
		SELECT *
		FROM
			(SELECT
				p.project_code
				, max(p.title) AS title
				, max(p.subtitle) AS subtitle
				, max(p.category) AS category
				, max(p.creator) AS creator
				, max(p.img_main) AS img_main
				, date(max(p.start_date)) AS start_date
				, date(max(p.end_date)) AS end_date
				, date(date_add((max(p.end_date)), INTERVAL 1 day)) AS pay_date
				, ifnull(format(sum(cost), 0), 0) AS now_amount
				, ifnull(format(max(goal_amount), 0), 0) AS goal_amount
<!-- 				, ifnull(max(goal_amount), 0) AS goal_amount -->
				, ifnull(sum(cost) / max(goal_amount), 0) AS ratio
				, ifnull(TRUNCATE(sum(cost) / max(goal_amount) * 100, 0), 0) AS goal_rate
				, CASE count(p.project_code) WHEN 1 THEN 0 
											 ELSE count(p.project_code)
											 END AS donor
				, max(p.creator_info) AS creator_info
			FROM project p
			LEFT JOIN fund f
			ON p.project_code = f.project_code
			GROUP BY p.project_code) A
		WHERE project_code = #{project_code}
	
	  
	</select>
	<!-- 핀테크 토큰 조회 -->
	<select id="selectToken" resultType="map">
<!-- 		SELECT access_token , user_seq_no   -->
<!-- 		FROM `user` u  -->
<!-- 		JOIN fintech_user_info fui  -->
<!-- 		ON u.user_id = fui.id  -->
<!-- 		WHERE id = #{sId} -->
	</select>
	
	
</mapper>